// Code generated by goctl. DO NOT EDIT!
// Source: entry.proto

package entryservices

import (
	"context"

	"github.com/jasonzou/zRPC/pb/zRPC"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Entries         = zRPC.Entries
	Entry           = zRPC.Entry
	EntryQuery      = zRPC.EntryQuery
	InsertResponse  = zRPC.InsertResponse
	ListRequest     = zRPC.ListRequest
	ModifyResponse  = zRPC.ModifyResponse
	RetrieveRequest = zRPC.RetrieveRequest

	EntryServices interface {
		Insert(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*InsertResponse, error)
		Modify(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*ModifyResponse, error)
		Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*Entry, error)
		List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Entries, error)
	}

	defaultEntryServices struct {
		cli zrpc.Client
	}
)

func NewEntryServices(cli zrpc.Client) EntryServices {
	return &defaultEntryServices{
		cli: cli,
	}
}

func (m *defaultEntryServices) Insert(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*InsertResponse, error) {
	client := zRPC.NewEntryServicesClient(m.cli.Conn())
	return client.Insert(ctx, in, opts...)
}

func (m *defaultEntryServices) Modify(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*ModifyResponse, error) {
	client := zRPC.NewEntryServicesClient(m.cli.Conn())
	return client.Modify(ctx, in, opts...)
}

func (m *defaultEntryServices) Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*Entry, error) {
	client := zRPC.NewEntryServicesClient(m.cli.Conn())
	return client.Retrieve(ctx, in, opts...)
}

func (m *defaultEntryServices) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Entries, error) {
	client := zRPC.NewEntryServicesClient(m.cli.Conn())
	return client.List(ctx, in, opts...)
}
