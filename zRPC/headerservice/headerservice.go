// Code generated by goctl. DO NOT EDIT!
// Source: header.proto

package headerservice

import (
	"context"

	"github.com/jasonzou/zRPC/pb/zRPC"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddHeaderResponse     = zRPC.AddHeaderResponse
	Header                = zRPC.Header
	ModifyHeaderResponse  = zRPC.ModifyHeaderResponse
	RetrieveHeaderRequest = zRPC.RetrieveHeaderRequest

	HeaderService interface {
		Add(ctx context.Context, in *Header, opts ...grpc.CallOption) (*AddHeaderResponse, error)
		Modify(ctx context.Context, in *Header, opts ...grpc.CallOption) (*ModifyHeaderResponse, error)
		Retrieve(ctx context.Context, in *RetrieveHeaderRequest, opts ...grpc.CallOption) (*Header, error)
	}

	defaultHeaderService struct {
		cli zrpc.Client
	}
)

func NewHeaderService(cli zrpc.Client) HeaderService {
	return &defaultHeaderService{
		cli: cli,
	}
}

func (m *defaultHeaderService) Add(ctx context.Context, in *Header, opts ...grpc.CallOption) (*AddHeaderResponse, error) {
	client := zRPC.NewHeaderServiceClient(m.cli.Conn())
	return client.Add(ctx, in, opts...)
}

func (m *defaultHeaderService) Modify(ctx context.Context, in *Header, opts ...grpc.CallOption) (*ModifyHeaderResponse, error) {
	client := zRPC.NewHeaderServiceClient(m.cli.Conn())
	return client.Modify(ctx, in, opts...)
}

func (m *defaultHeaderService) Retrieve(ctx context.Context, in *RetrieveHeaderRequest, opts ...grpc.CallOption) (*Header, error) {
	client := zRPC.NewHeaderServiceClient(m.cli.Conn())
	return client.Retrieve(ctx, in, opts...)
}
